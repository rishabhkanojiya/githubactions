name: Build Upload Pipeline
# A straightforward set of github actions for backing up, removing, and uploading react code.
# The actions perform the following tasks:
# 1. Generates and caches a build.
# 2. Publish the build to Integration.
# 3. Wait for approval before uploading it to Prod; once approved, proceed with the production push.

on:
  workflow_dispatch:
    branches: [master]
  # "workflow dispatch" assists in manually dispatching actions.

  # push:
  #   branches: [master]
  # the "push" action begins once the code is pushed/merged in the "main" branch.
  # You can add multiple branches too.
  # for example : Branches: [main, prod]
  # The action in the preceding example will be executed once the code is pushed/merged in the "main" and "prod" branches.

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
# This allows a subsequently queued workflow run to interrupt previous runs

jobs:
  build:
    name: Creating Build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Dot.net.files.test.web
    # "defaults" and "working-directory: Dot.net.files.test.web" are used here so that the job can look in this folder for the "package.json" file.

    steps:
      - name: Run Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          #  use below in case of using yarn
          # cache: "yarn"
          # cache-dependency-path: "**/yarn.lock"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # "cache-dependency-path" caches the node modules on every run.
      # So it caches in "build," and it will not install node_modules again in the next job.

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install Node Dependencies
        run: npm install

      # "actions/cache@v3" This caches the node modules as well, but at the workflow level.
      # Even if the workflow starts, it will check for cache and if none is found, it will run "npm install."
      # The key in this case is generated uniquely based on the data in "/package.json."
      # As a result, the new key is generated whenever the "package.json" file is updated or a new package is installed.
      # As a result, until a new package is installed, this workflow will always use the cached file.
      # as a result of reducing the build generation time

      - name: Running Tests
        run: npm test
      # basic node commands

      - name: Cache Build
        id: cache-react-build
        uses: actions/cache@v3
        with:
          path: |
            **/build
          key: ${{ runner.os }}-cache-react-build-${{ hashFiles('**/public/deploy/version.json') }}

      - if: ${{ steps.cache-react-build.outputs.cache-hit != 'true' }}
        name: Creating Build
        run: npm run build

      # Step: Cache Build
      # "actions/cache@v3" is used to cache the build so that it can be used in the next job.
      # The reason for using this is that all files created in a job are destroyed after the job is completed.
      # As a result, the "./build" generated by "npm install" is destroyed once the "build" job is completed.
      # The key in this case is generated uniquely based on the data in "public/deploy/version.json."

      - name: list files
        run: ls ./build/static/js
      # just for keeping track of the files

  DeployDev:
    needs: build
    name: Deploy On Dev
    runs-on: ubuntu-latest

    environment:
      name: Dev
      url: https://dev.com

    #  Using the "Dev" environment setting for environment variables and protection rules

    defaults:
      run:
        working-directory: Dot.net.files.test.web

    steps:
      - uses: actions/checkout@v3

      - name: Restoring Build Cache
        id: cache-react-build
        uses: actions/cache@v3
        with:
          path: |
            **/build
          key: ${{ runner.os }}-cache-react-build-${{ hashFiles('**/public/deploy/version.json') }}

      # restoring the cached build from "Step: Cache Build"

      - name: Removing old Build
        uses: rishabhkanojiya/aws-copy-rm@remove
        #with:
        #  args: --dryrun --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR_BACKUP: ${{ secrets.BACKUP_SOURCE_DIR }}

      # executing the "rishabhkanojiya/aws-copy-rm@remove" action to remove the files from the s3 link

      - name: Copying New Build on Int
        uses: rishabhkanojiya/aws-copy-rm@copy
        #with:
        #  args: --dryrun --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR_COPY: ${{ secrets.SOURCE_DIR }}
          DEST_DIR_COPY: ${{ secrets.DEST_DIR }}

      # Using the "rishabhkanojiya/aws-copy-rm@copy" action to sync the new build with the S3 link

  DeployProd:
    needs: [build, DeployDev]
    name: Deploy On Prod
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://prod.com

    # Using the "Production" environment setting for environment variables and protection rules
    # This configuration allows you to halt production until the reviewers approve it.

    defaults:
      run:
        working-directory: Dot.net.files.test.web

    steps:
      - uses: actions/checkout@v3

      - name: Restoring Build Cache
        id: cache-react-build
        uses: actions/cache@v3
        with:
          path: |
            **/build
          key: ${{ runner.os }}-cache-react-build-${{ hashFiles('**/public/deploy/version.json') }}

      - name: Backing up old Build
        uses: rishabhkanojiya/aws-copy-rm@backup
        #with:
        #  args: --dryrun --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR_BACKUP: ${{ secrets.BACKUP_SOURCE_DIR }}
          DEST_DIR_BACKUP: ${{ secrets.BACKUP_DEST_DIR }}

      # executing the "rishabhkanojiya/aws-copy-rm@backup" action to backup the files to the s3 link

      - name: Removing old Build
        uses: rishabhkanojiya/aws-copy-rm@remove
        #with:
        #  args: --dryrun --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR_BACKUP: ${{ secrets.BACKUP_SOURCE_DIR }}

      # executing the "rishabhkanojiya/aws-copy-rm@remove" action to remove the files from the s3 link

      - name: Copying New Build on Production
        uses: rishabhkanojiya/aws-copy-rm@copy
        #with:
        #  args: --dryrun --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR_COPY: ${{ secrets.SOURCE_DIR }}
          DEST_DIR_COPY: ${{ secrets.DEST_DIR }}

      # Using the "rishabhkanojiya/aws-copy-rm@copy" action to sync the new build with the S3 link

  slackNotification:
    runs-on: ubuntu-latest
    name: Slack Notification
    needs: [Build, DeployDev, DeployProd]
    if: ${{ always() && !cancelled() }}
    steps:
      - uses: actions/checkout@v3
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_FOOTER: ""
          SLACK_USERNAME: notification
          SLACK_MSG_AUTHOR: ${{ github.actor }}
          SLACK_ICON: https://user-images.githubusercontent.com/30200462/185666812-35fb9de3-de61-407b-9522-1c1222bad306.pngs
          SLACK_COLOR: "${{ needs.DeployProd.result != 'success' && '#ee6055' || '#60d394' }}"
          SLACK_TITLE: "${{ needs.DeployProd.result != 'success' && '‚ùå Build Upload Failed' || 'üöÄ Build Uploaded Successfully' }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    # This section simply notifies a slack channel when the process fails or pass.
    # The message contains the following information:
    # 1. the user who initiated the actions.
    # 2. the branch that is currently being pushed
    # 3. the action that is being performed
    # 4. final commit message
