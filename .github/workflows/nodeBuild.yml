name: Creating and Caching Node build

on:
  workflow_call:
    inputs:
      project-folder:
        description: The folder containing the project to build
        type: string
        default: Dot.net.files.test.web

    outputs:
      versionJson:
        description: "Version number in JSON file"
        value: ${{ jobs.readJson.outputs.versionJson }}
      isCss:
        description: "Css flag in JSON file"
        value: ${{ jobs.readJson.outputs.isCss }}
      isTrans:
        description: "Trans flag in JSON file"
        value: ${{ jobs.readJson.outputs.isTrans }}
      isImage:
        description: "Image flag in JSON file"
        value: ${{ jobs.readJson.outputs.isImage }}
      isMain:
        description: "Main flag in JSON file"
        value: ${{ jobs.readJson.outputs.isMain }}
      isConfig:
        description: "Config flag in JSON file"
        value: ${{ jobs.readJson.outputs.isConfig }}
      isDryrun:
        description: "Dryrun flag in JSON file"
        value: ${{ jobs.readJson.outputs.isDryrun }}
      isDevOnly:
        description: "Upload on Dev Only"
        value: ${{ jobs.readJson.outputs.isDevOnly }}

jobs:
  readJson:
    name: Read Input File
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.project-folder }}
        # "defaults" and "working-directory: Dot.net.files.test.web" are used here so that the job can look in this folder for the "package.json" file.

    outputs:
      versionJson: ${{fromJson(steps.set_var.outputs.versionJson).version}}
      isCss: ${{fromJson(steps.set_var.outputs.versionJson).css}}
      isTrans: ${{fromJson(steps.set_var.outputs.versionJson).trans}}
      isImage: ${{fromJson(steps.set_var.outputs.versionJson).images}}
      isMain: ${{fromJson(steps.set_var.outputs.versionJson).main}}
      isConfig: ${{fromJson(steps.set_var.outputs.versionJson).configs}}
      isDryrun: ${{fromJson(steps.set_var.outputs.versionJson).dryrun}}
      isDevOnly: ${{fromJson(steps.set_var.outputs.versionJson).isDevOnly}}

    steps:
      - name: Run Checkout
        uses: actions/checkout@v3
      - name: Run Build
        run: ls
      - id: set_var
        name: Load version.json
        run: |
          content=`cat ./public/deploy/version.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=versionJson::$content"

      - name: Output Value
        run: |
          echo "${{fromJson(steps.set_var.outputs.versionJson).version}}"

  build:
    name: Creating Build
    needs: readJson
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Dot.net.files.test.web
        # "defaults" and "working-directory: Dot.net.files.test.web" are used here so that the job can look in this folder for the "package.json" file.

    steps:
      - name: Run Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          #  use below in case of using yarn
          # cache: "yarn"
          # cache-dependency-path: "**/yarn.lock"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # "cache-dependency-path" caches the node modules on every run.
      # So it caches in "build," and it will not install node_modules again in the next job.

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install Node Dependencies
        run: npm install

      # "actions/cache@v3" This caches the node modules as well, but at the workflow level.
      # Even if the workflow starts, it will check for cache and if none is found, it will run "npm install."
      # The key in this case is generated uniquely based on the data in "/package.json."
      # As a result, the new key is generated whenever the "package.json" file is updated or a new package is installed.
      # As a result, until a new package is installed, this workflow will always use the cached file.
      # as a result of reducing the build generation time

      - name: Running Tests
        run: npm test
      # basic node commands

      - name: Cache Build
        id: cache-react-build
        uses: actions/cache@v3
        with:
          path: |
            **/build
          key: ${{ runner.os }}-cache-react-build-${{needs.readJson.outputs.versionJson}}

      - if: ${{ steps.cache-react-build.outputs.cache-hit != 'true' }}
        name: Creating Build
        run: npm run build

      # Step: Cache Build
      # "actions/cache@v3" is used to cache the build so that it can be used in the next job.
      # The reason for using this is that all files created in a job are destroyed after the job is completed.
      # As a result, the "./build" generated by "npm install" is destroyed once the "build" job is completed.
      # The key in this case is generated uniquely based on the data in "public/version.json."

      - name: list files
        run: ls ./build/static/js
      # just for keeping track of the files
