name: Test Github Script

on:
  workflow_dispatch:
    branches: [main]

  # push:
  #   branches: [main]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: creating build
        run: echo "hello"
      # - run: ls ./build

  build2:
    name: build2
    needs: "build"
    runs-on: ubuntu-latest
    steps:
      - name: creating build
        run: echo "hello"
      # - run: ls ./build

  gsc:
    name: use github script
    runs-on: ubuntu-latest
    needs: [build, build2]
    if: ${{ always() && !cancelled() }}
    steps:
      - uses: actions/github-script@v6
        id: set-result
        with:
          script: |
            const makePayload = (data, jobDetails) => {
              return {
                name: data?.name,
                userName: data?.actor?.login,
                userImage: data?.actor?.avatar_url,
                runs: data?.run_number,
                status: getStatus(jobDetails?.jobs),
                commit: data?.head_commit?.message,
              };
            };

            const getStatus = (jobs) => {
              let isFailure = jobs?.some((job) => job.conclusion == "failure");          
              return isFailure;
            };

            const runDetails = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context?.runId,
            });

            const jobDetails = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context?.runId,
            });


            const data = makePayload(runDetails?.data, jobDetails?.data);
            console.log(data)
            return data;

      - run: echo "${{fromJson(steps.set-result.outputs.result).userName}}"
      - run: echo "${{fromJson(steps.set-result.outputs.result).status}}"
